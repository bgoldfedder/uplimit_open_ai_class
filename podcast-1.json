{"podcast_details": {"podcast_title": "Salesforce Developer Podcast", "episode_title": "189: Practical DevOps with Rob Cowell", "episode_image": "https://ssl-static.libsyn.com/p/assets/a/e/4/d/ae4de219513cad32/2021-01-salesforce-devs-podcast-1400x1400-v2.png", "episode_transcript": " What are the things that I want to make it? Of course at nine years old I played a lot of computer games, but I was very much hooked on the if I tell it to do this, it will do it and then if I change this, it'll do it slightly differently. Many hours designing little characters and moving them around the screen with a joystick. That's Rob Cowell, DevOps Advocate at Gearset. I'm Julian Duque, your host for the Salesforce Developer Podcast and here in the podcast we share stories and insights from developers for developers. Today we are going to talk with Rob about DevOps in the Salesforce ecosystem. But before we will start, just as we left off and we often do with his early years. So way back in 1982, the dawn of 8-bit home micros and then becoming affordable for general usage. So it was Christmas of 1982, I was nine years old and folks can do the math. I received my first computer for Christmas. It was a Czech rebrand of a Japanese import machine called a Sword M5. It had 16 kilobytes of memory. It had a Z80 processor and yeah, it was my first entry and I've been hooked ever since. Wow. What do you do with that type of computers? This is like maybe two years before I was born, so I don't have an idea about what you're talking about. Yeah, no problem. So yeah, these machines were interesting and from a development perspective, actually some of the best ways to get started with that world because a lot of these machines either had basic, the programming language built into them on ROM or in the case of this machine, they had a basic cartridge. And in fact, there were actually a few different basic cartridges for that machine. There was basic I, which supported integer math. There was basic G, which had built-in graphics functions. And so you had to be quite creative and think about, what are the things that I want to make here? Of course, at nine years old, I played a lot of computer games, but I was very much hooked on the, if I tell it to do this, it will do it. And then if I change this, it'll do it slightly differently. Many hours designing little characters and moving them around the screen with a joystick. And yeah, that's what really spawned my interest in computers, technology, programming. And many, many, many years later, here we are. Oh, nice. And back in the day, how you learned that basic, it came like with that big book, because this is pre-internet. So you didn't have that opportunity to learn that. No, absolutely. And yeah, I mean, it came with a manual and a few examples of programs that you could type. And then much like we learn programming even to this day, you start with an example and you start changing things and tweaking things. But in those days, the basics on different brands of machine were slightly different. So Microsoft had a basic and they licensed it to a lot of companies, but then other companies would do their own implementation with a slightly different syntax. But it was always possible, as you say, you know, there were books available and you could pick up a book for one brand of computer and you could kind of figure out, oh, okay, I see what that's doing here. I just need to do it slightly differently for my machine. And yeah, you just tinker. That's the thing that I miss a little bit about sort of programming for a living versus doing it for a hobby is that freedom to tinker and experiment and try things. And, you know, we talk about sort of fail fast. There was a lot of that going on back in those days before it became fashionable. Yeah, that happens to me like today, that pretty much the job that I have was my hobby. So you have like that change. It makes things a little bit different. So you started when you were nine. What happened next? You continue with other different computers or you started like going to different hobbies? What was that evolution? Yeah. So, you know, as the machines became more advanced, I moved with the machines. You know, I went from 8-bit machines to 16-bit machines. You know, I got involved with a very sort of digital arts subculture called the demo scene where people are doing programming and artwork and music for the sheer joy of it. And then it becomes a little competitive. And, you know, we have parties when people vote on the productions that people make. I still do that to this day, although not as much because I have children and wives and jobs and all the boring adult stuff. But yeah, I continued doing that as a hobby. One of my favorite stories around that actually was, you know, when I was still young, my mother, you know, because this is in the early days of computing, right? And so my mother said to me, you want to go outside and play football with the other kids. You never make a living messing about with computers. And every so often, I do remind her of this because I make a quite good living messing about with computers now. But yeah, I didn't actually do programming as a career, as a paid job until I was about 22, 23. So it was a long time coming in terms of turning that hobby and that interest into a career. And when you started seeing it as a career, what was that first professional interaction? So you were like building software or what type of software? Yeah. So some of the folks listening will be able to remember sort of way back in the midst of time, I was a Microsoft Access developer, specifically Access 2.0. So we're talking, I think probably somewhere around 1996, I think that would have been. And yeah, and I went through a few iterations of Access 2, Access 95, Access 98. And then I kind of made that leap over to Visual Basic and then from there to.NET and C Sharp. So there's definitely an evolution there. And I think, when I got onto the.NET platform using C Sharp, that was kind of my first entry into proper object-orientated programming. And the interesting thing is, we'll talk about the evolution of that into the Salesforce world, I'm sure. But having kind of got those fundamental concepts of object- orientated program and the syntax of C Sharp, when I did eventually land on the Salesforce platform and saw Apex, it didn't feel alien to me at all. There was definitely a feeling of comfort. This isn't dissimilar to what I've seen before. Yeah. It's like when you know one specific language and you are learning another one, there is like a familiarity. You're not going to have like that, this is super strange. I am just jumping from one thing. It's the same logical programming behind. And the language is just syntax. Yeah. And I think one of the interesting things about transitioning from those kind of traditional development stacks into something like the Salesforce platform is, as a developer, I didn't need to learn Apex quite as much. I needed to learn the unique elements of the platform in general. Things like governor limits, things like the object model, things like the multi-tenant aspects and how you interact with the config side of the platform. And so, the Apex thing came naturally, but how to use it wisely within the context of Salesforce overall, I think that was the greater learning curve when I came to that platform. Nice. And this was a whole long ago. Oh, so I can give an exact date on that one. Exact date. Yeah. The day I discovered Salesforce was March 26, 2010. I remember it because it's my mother's birthday. Okay. Makes sense. But that again is an interesting story. So I was like a freelance consultant and I was brought in by a company to be an application support developer. So one of those sort of traditional hybrid roles that used to abound in companies. And on my very first day, the hiring manager said, okay, so if anybody asks, you're a Salesforce expert because the only way that HR can do that is if we told them we were getting a Salesforce expert. And I said, yeah, okay, no, that's fine. What is Salesforce? And yeah, they're in the last 13 years of history. Fake it, then you make it. Exactly right. Yeah. And there you are. I mean, when I met you pretty much online, I joined the Salesforce ecosystem four years ago, exactly joined the Heroku team. And you were one of the first persons that I started to interact with. You were very interested in Heroku, but you were also recognized within the Salesforce community already. So it's good to have you and we are long over you to have you here at the podcast. So how was that transition from being just like a Salesforce developer consultant now to what are you doing today, which is the DevOps side of things? Yeah, no, absolutely. And I think DevOps is and always has been a strong part of what it means to be a developer. Nobody codes in isolation and does nothing with it, right? You have to deliver that change to the hands of end users or customers. And that kind of way of thinking, that sort of delivery focus is ideally DevOps driven. There are other ways of delivery, but hopefully folks realize that that's not the optimal way to deliver things. And I think DevOps can be small incremental changes, or it can be a full end-to-end process. And I think the transition from that was that I work for a vendor in the Salesforce DevOps space and I was using the product and it saved me so much time. I'm not certainly here to pitch a product, I'm here to pitch a mentality. But yeah, saving developer productivity time is a passion of mine. We had a discussion earlier today and we were talking about how developers are, or good developers are inherently lazy, right? And the thinking behind that is that you want to drive efficiencies. You don't want to be doing dull repetitive tasks, you want to optimize and you want to leave plenty of time for the fun stuff that you really enjoy. And so the DevOps mentality is kind of eliminating that repetitive task that can be easily automated, much like many development tasks. And so I kind of grew my interest in that. But equally, many years ago when I started my Salesforce career, I met one of your counterparts actually, it was a developer evangelist at Salesforce. And I said, evangelist? What's that all about? And he explained the role. I'd like to do that someday. It took me 10 years to get there. But the nice thing is, is it allows me to kind of bridge those two disciplines. So, as a developer, and I've only been in this role for a little over a year now, but as a developer, certainly as a consultant, there were times where I'd be up late, delivering a client project, getting a deployment, particularly thorny, tricky thing delivered. And now I'm in a position where not only do I not have to do that, but my role is geared around helping other developers not have to do that. It's the educational element of that that I think I really enjoy. Taking all those many years of programming, whether it's for hobbies or whether it's for work, and everything that I've kind of experienced, and then using that as a means to help others reach that kind of stage in their development journey a lot quicker than I ever did. And this is what I love about this role, being myself also an advocate, but just for developers. For me, first, the constant joy of helping folks to be better, learning best practices, how can they succeed about what they are doing. And also it's a kind of a way to help them and also it's a constant learning exercise for me. I'm always learning from the people that it's asking me questions, they are coming to me with certain specific challenges that it makes me go further to be able to learn and understand how to give them the answers. So it's a very interesting job. How is this DevOps advocate role? I have known about the developer advocate role, but I think this is the first time I hear about the DevOps advocate. So tell me a little bit more about it. Yeah, I mean, I sometimes jokingly say to people, my job is to stop you using change sets. And I've had some interesting conversations with Karen Fiddleak from your Salesforce world, who is the product manager for DevOps center. And largely she has the same goal to stop people using change sets. But in a more sort of serious and broader sense, I think we just want to educate folks about what DevOps actually is, the benefits that it can deliver, and how actually as part of that overall development pace, again, it comes back to removing the tasks that you have to do, so that you can have more time to do the tasks that you want to do. But also it's about the changes that you make, getting them to where they're actually valuable the most. A lot of DevOps conversations are, oh, is the org the source of truth or is source control the source of truth? But when you think of it from your customer's perspective, the source of truth is production. As an end user, if you can't use that today because it's still in a test environment or a development environment, it doesn't exist for you. And so we try and encourage this mentality of delivering value as efficiently as possible so that people can get the most out of the changes and the enhancements that you're making to your organizations. Nice. So normally folks associate the term or concept DevOps with operating infrastructure, like maybe taking care of instances, virtual machines, all the process behind. But Salesforce is different. Salesforce itself is a platform and you are not taking care of those aspects. So what are those key components of Salesforce DevOps? Okay. So we always like to say that there's two core elements of DevOps. So forget the dev and the ops split. I think that's certainly for the Salesforce platform is a bit of a red herring because not all dev is code. And most of the time with Salesforce teams, we don't have a separate operations team that's managing things. It tends to be the same. But the split that we like to talk about is like the 80-20 split of culture and mindset versus the technology and the tooling. So a lot of DevOps is about communication, collaboration, making cross-functional teams. I like to think of DevOps as starting with folks like the business analysts. So one of the interesting principles of DevOps is small incremental changes, release early, release often, and don't try and sort of do a big bang approach. And in my mind, that starts with the business analyst in terms of how they get the requirements, how they analyze the requirements and break them up into smaller manageable chunks. So you, for example, could have a hypothetical example that you could have a task to create the new fields and add them to a layout. That's one release. Then another thing that actually does some calculations or intensive processing on those fields, that's the next release. So you're incrementally getting that. And so from that end-to-end life cycle, you're getting people invested in it from the, okay, how do we break this up into small chunks? How do we develop it into small chunks? How do we test it in small chunks? How do we deploy it? And so you're kind of getting everybody invested in that process. And the only way you can do that is through communication, collaboration, and interworking between different teams. So it breaks down a lot of the silos there. So that's kind of one of the viewpoints of the components sort of off-platform, off-technology. Then on-technology, you know, there are, you know, we strongly encourage people to use version control. The de facto choice is usually Git. And there's plenty of material and tutorials on that, both in the wider sense and also from, you know, Salesforce's own great materials and Trailhead and whatnot. But also, you know, it's things like, well, how do we automate the testing? You know, how do we actually have a commitment to quality to what we deliver? So it's not just about how fast we can deliver, but how fast can we deliver something that's good? You know, do you want to deliver bad changes quickly, or do you want to deliver great changes slightly slower, but with that due diligence around making sure that, you know, we're getting quality deliverables? And actually, if you think about how the traditional model of delivering code, something's not right, you take it back, you rework it, you have to redeploy it, and that, if you can eliminate that rework, then actually the commitment to quality becomes a faster path to success anyway. Mm-hmm. And also it entails the automation side of things. Absolutely. Like the whole process of fixing, deploying, testing, manually will take a lot of time. And depending on the size of the team you have, if you're an automate, things are getting more complex. How do you know that you need DevOps in your org? Do all orgs need to have like a proper DevOps team or like a DevOps practice, or this is something just for big orgs, big projects? So what about that? No, I know I'm a DevOps advocate and it is my role to promote this, but I do genuinely believe that everybody can benefit from DevOps practices. You know, I was an independent consultant before I joined the company and I was a one-man band. And I was using a lot of those DevOps processes because I had a lot of clients with a lot of projects and I needed to get a lot of things delivered and DevOps was the efficient path for doing that. So I think DevOps is never done and there is no one size fits all for how you achieve that. If you are looking at how do I deliver small incremental change, you're taking on an element of DevOps. If you're saying, okay, we need to adopt a source-driven approach where actually we're using source control and that is our mechanism for delivering change and being the source of truth, you're doing DevOps. If you're taking backups of not just your data, but your metadata, that comes under the purview of DevOps as well. So you can take as little or as much of that as possible. And that's kind of the nice thing. It's not really prescriptive. One of the things that I encourage folks to do is adapt DevOps to your way of working. Don't adapt your way of working to fit a DevOps model that you may or may not have read about. Not all of us are the Googles, the Amazons, the Facebooks of this world where we need that enormous cloud-scale delivery mechanism. They do some great stuff with that, but not everybody is Google and Facebook and Amazon and all these other huge players. So it's really important to make sure that you know, you're not just taking on a job as an organization or as an individual or whichever sort of way that you want to frame it. Look at where you are today. Look at, okay, what do we want to achieve? How quickly do we want to be responsive to the needs of our customers and deliver positive change to them? And then look at, okay, what are the bottlenecks to that? How long is it taking us from ideation or receiving a request for a change to actually getting it out in the hands of the people that requested it? And then you start looking at, okay, what can we do to pull those times in? How can we be more efficient? And it's that constant measure, adjust, remeasure, adjust. You know, it's much like, you know, the traditional development lifecycle. You're constantly improving. So DevOps is never done. And it is never done. It doesn't end. But how can I get started if I have an org or a project, but I am not applying any DevOps technique? How can I get started at least with the most important and then iterating over the other aspects of DevOps? Yeah. And again, there's a few things that come into play. I always think that, you know, source control is the technical cornerstone of any DevOps process and starting to think about how can I get my metadata under that source control? And it's not about pulling every piece of metadata out of your org and dropping it in there. It's about looking at, okay, what changes over time, all the time? You know, what are the things that we work with on a daily basis? Okay. The pace of change for, for example, the account or the opportunity or the contact is quite high. Let's get those under that source control and start with those and grow out from there. So from a technical standpoint, that's a great way to start. But as I mentioned earlier, you know, 80% of DevOps is culture. Okay. So getting started is thinking about how do we work? How do we want to work? How do you know, what are the various stages of a business process of how do we deliver that change? Do we have the development team do the deployments? Do we have an operations team that's separate? It still does happen even in the Salesforce world sometimes that split. But it's also about fostering that culture of, okay, this is our new way of working. You know, we're not going to go into production and change a field directly. We're not even going to do that in UAT. We know we're going to go through this pipeline. And it's about getting engagement, getting everybody aligned to, yeah, I can see the benefits of this way of working because it means that my changes go in first time every time. And actually, I, you know, I know that I'm working on this change on the account object, but somebody over there on, you know, elsewhere on the development team has got a different JIRA ticket, for example, the way they're also working on that. So we're going to collaborate. We're going to talk and make sure that we're not overwriting each other's changes. So it's kind of a more of a way of thinking and a way of working. And I'd say, you know, people that wanting to get started with that, it's start with the culture, start with the people, start with the teams and work out, you know, how can we structure this? Even if we are still using chain sets, how can we get better at that? Because thinking in that way and changing that mindset, you're starting to do DevOps already. You're thinking about effective delivery. Nice. What is the most hardest aspect of implementing DevOps for you? Hardest point of implementation. That's a tough one. I think perhaps there's always this temptation to try and do everything, right? To walk before you can run, to have a completely automated pipeline. The developers finish, they press a button and it's delivered in production. It's very rare that that happens in reality. So I, you know, that itself is a difficult piece. You know, automation, I always encourage folks to try and do these things manually for a few releases and then slowly and gradually build that automation because trying to automate everything from start is probably one of the hardest challenges. One of the terms in Salesforce DevOps and DevOps generally is CICD. So continuous integration, continuous delivery or continuous deployment. There's a couple of acronyms for the CD part. But the idea is that, you know, you're automating that point of I finish my work, I'm saving it to I'm now integrating that into the org. And that is very difficult to do. And very few folks that are starting that journey are ready to do that. It's really the mature DevOps practitioners that have gone through that journey and learned and burnt to the point where they've refined that process to achieve that. And it goes back to what I was saying about, you know, measure, improve, remeasure. Did it make a tangible difference to how we deliver? No. Okay, do we need to do more or less of something to get that right? You know, and it's continuous improvement, right? We talk about continuous improvement as a career piece. You know, people want to do, you know, they want to keep learning, they want to improve themselves. Processes require continuous improvement as well. Technology never stands still and you need to keep thinking about, okay, how can we get better at this? You know, are we delivering faster? Or are more of our changes not going in first time? You know, what is causing that? Analyze, work out what the problem is, remediate it and keep going. So you will say that the Salesforce DevOps engineer is a role on its own, like Salesforce developer or Salesforce admin, or it is a skill that either an admin or a developer should have. So it can be a standalone role for much larger organizations, but I still prefer as it, as a way of working that everybody has a stake in a Salesforce DevOps process. I think it is a skill set that everybody should adopt because, you know, to reiterate what I was saying earlier, you know, it's a mindset. It's thinking about how can I break down this change, this requirement, this need into manageable pieces that I can deliver value the fastest, okay? And it's about decomposing that. So that way of thinking, you know, is the skill set part. You know, that's not somebody's job to sit there and think about how to deconstruct a problem into, you know, manageable tasks. So yeah, I would tend to, you know, on the side of it's a skill set that admins, developers, etc. should be taking. There are organizations that have dedicated engineers, but I think the DevOps engineer concept definitely comes from non-Salesforce platforms where they do have to manage servers, virtual or otherwise, and instances and infrastructure and clusters and all the other great stuff that, you know, folks on other platform are doing, that we as Salesforce professionals don't have to worry about because very smart folks are looking after that for us. Cool. For all of the folks that want to learn more about this, you know, skill set or profession or whatever we are going to call it, what is your word of advice? Where to go next? Do you have any specific resource to recommend? Any of your talks that you have given on events? Yeah. So yeah, I mean, I do talk at a lot of events now. It is very much the nature of my job. But I also, you know, I write a lot of blog posts that you can find on my company's website. I also contribute to our online self-learning platform. So we have a platform called DevOps Launchpad. And it's a little trailhead like in terms of it's self-paced learning, it's modular, it's free. There are badges, there are certifications. And what we try and do with that is to make it about Salesforce DevOps, not about any specific platform or product. So, you know, I'm quite proud of some of the stuff that we've written on there because you can take the techniques and the lessons and the thinking around how do I do DevOps for Salesforce. And you can apply that to any platform, right? You could use DevOps Center, you could use our platform, you could use any of our competitors' platforms. Again, this comes back to what we're saying right at the top of the call. The short joking version of what I do is stop people using chainsets. And these tools are going to help you do that, right? The learning there, you can apply to whichever way. I want you to understand DevOps, not understand a specific tool for using DevOps. Beautiful. I love that. And we will share those resources, obviously, to the folks that are listening to us. Changing will be the topic here. I have seen that you are very active online in something called Chartforce. Tell us more about that. I have seen like some like crazy chart designs and you were wearing one yesterday that say like, this is my lucky demo chart, something like that. So tell me about that project. Yeah, that specific shirt. I was doing a talk yesterday, Force Landia here in Portland, and I did have to do a live demo. So I did have my lucky demo t-shirt. But the idea of the t-shirts from Chartforce is that it was an initiative started by Todd Halfpenny. He's an MVP out of the UK community. He's just got a golden hoodie as well. He's a fantastic guy. I encourage you to connect with him. But he had this idea of making these topical to Salesforce, hopefully amusing t-shirts. It's an excuse for three British guys to use all their best dad jokes on Salesforce t-shirts. But the idea is that we produce these t-shirts for the community and by the community. So we take suggestions for those t-shirts. But the key thing about Chartforce is that 100% of our profits go to charity. And we change that charity every quarter. So we reach out to the community predominantly through Twitter. I think there's a lot of contention around that choice of platform these days, but we're not going to go down that rabbit hole. Yeah, it's the platform. It's the platform. Go where your audience is. So we'll say to folks, give us some suggestions for charities that you want us to support for the next quarter. And then the first three that we get, we put into a poll, people vote, and that becomes who we support. So currently for this quarter, we're supporting Merivis Vets, an organization that helps military veterans and military spouses to transition into civilian technology careers, predominantly Salesforce, but I believe not exclusively Salesforce, and just help people from that world to start their Salesforce journey. We've done other things for various underrepresented communities or for humanitarian aid, like we did some fundraising for one of the Turkey earthquakes. So we try and make sure we do that. And as I say, 100% of our profits do go to those charities. But one last thing I'd love to add on that is recently when Todd got his golden hoodie, he was presented the golden hoodie by the CEO of Salesforce UK, Zahra Baraluwmi. And she absolutely loved the t-shirt, but what she didn't realize is there was an homage to her on the back of the t-shirt. She recently received a CBE, which for non-UK folk is the commander of the British empire. It's like the next thing down from a knighthood or a damehood. Wow. And so Todd kind of alluded to that on the back of his t-shirt, and Zahra had seen this, and she's actually ordered that same t-shirt. And she posted on Twitter yesterday that she'd received her first Shirt Force t-shirt. So yeah. That's an amazing callout. Oh, nice. Awesome. When you are not advocating DevOps or coming up with crazy ideas for t-shirts, what do you do? What are your hobbies? Or what do you like to do besides that? So I kind of mentioned this one in passing earlier about my enthusiasm for sort of making new software for old hardware. So I have a collection of some of those old computers that I grew up with. And we still continue, me and some friends, we continue to make little productions on that. Our most recent thing that we did was a set of sort of animations and music and things for a Nintendo GameCube of all things. So within our little culture, we have our equivalent to the Oscars called the Meteorix. And we were a nominee for that production this year. So that made me very happy. Wow. So yeah, I do these sort of creative things. I do the artwork or the music or sometimes the coding. But then I also make music. I DJ. Yeah. So I unleash the creative side of my brain rather than the technical side of my brain. Have you ever seen or done these, it's called live coding usually in the community, but it's making music live with code. Have you done that? I haven't done that. No. But again, sort of tying that question and sort of the some of the sort of the recreational coding that we do. We have something called shader showdowns. So we use OpenGL and GLSL shader language, and we do real time visualizations to music. And it's done by code. So there is a DJ playing. We're not generating the music, but we're generating the visuals that go with that. And there's the 3D swirling things and patterns and animations and stuff. But you're doing that head to head against the clock. And then the audience is voting for who they think won that. So yeah, that's kind of a big part of it. So it's very similar to what you describe, but it's more the visual than the audio aspect of that. That's fascinating. And one thing I want to add before we end this episode is also FoodForce. You publish a lot of 3D tasty stuff on your social. So tell us about that. Yeah. So FoodForce is a sort of little sort of sub movement that we created on the Salesforce community. Again, sort of mostly on Twitter with hashtags. And it just kind of grew out from that. You know, people posting nice food and recipes that they'd made. Everyone loves an Instagram food photo, right? And it's just an extension of that. But then it kind of grew out from that. So we did a FoodForce cookbook. So Ines Garcia organized that, and it's full of healthy plant-based recipes. And again, in the spirit of the way that the Salesforce community loves to work, the profits from that book again were folded back into charity for particularly food-related charities. So helping support those that aren't getting enough food or need support or better nutrition, various projects along those kinds of lines. And so yeah, that's just kind of grown out there. And there's now a FoodForce website with a bunch of the recipes from the community. There's constant talk of actually having a meetup across various geographic boundaries to get together and just kind of like a potluck supper. Everyone brings a recipe or something that they love making. And yeah, and just it's fostering that sort of community spirit a little bit, but also doing something for good as well. That's what the Salesforce community is about. I might need to participate in that. What is your signature dish? I do a particularly good Moroccan-inspired slow-cooked lamb. Wow. That one actually made it into an official Salesforce cookbook that we did in partnership with the AppExchange. Yeah, I can do a slightly westernized version of an Indian keema matur, which is like a minced meat and peas curry. I imagine that our friends in the India, Ohio will probably not consider it too authentic, but it works for me. And yeah, that's one of my favorites. Mine is the Peruvian ceviche. So maybe that'll be my first contribution. Oh, there we go. Let's see. Okay, Rob, thank you very much for sharing your story with us. And of course, for making us more aware about DevOps. Thank you for having me along and allowing me to talk about it. Of course. If you want to learn more about this show, head on to developer.salesforce.com slash podcast, where you can hear all the episodes and read the show notes. Thank you, everybody. And talk to you the next time."}, "podcast_summary": "In this podcast, Rob Cowell, a DevOps advocate at Gearset, talks about his journey into the world of technology and programming. He shares his experiences starting from a young age with his first computer, and how he developed a passion for coding and designing characters. Rob then discusses his transition into the Salesforce ecosystem and how he became interested in DevOps. He explains the key components of Salesforce DevOps, including culture and mindset, as well as the use of version control and automation. Rob emphasizes that DevOps is not just a separate role, but a skill set that all developers and admins should adopt. He provides advice for getting started with DevOps, including implementing source control and fostering a culture of effective delivery. Rob also discusses the Chartforce initiative, where Salesforce-themed t-shirts are created and sold for charity, as well as the Foodforce movement, which focuses on sharing recipes and supporting food-related charities.", "podcast_guest": "Rob Cowell", "podcast_highlights": "In this podcast, Rob Cowell, a DevOps advocate, talks about his early interest in computers and programming. He shares his experience with 8-bit machines and the basic language. He also discusses his transition from a Microsoft Access developer to a Salesforce developer. Rob explains the core elements of DevOps, including culture and mindset, as well as the technical aspects such as version control and automation. He emphasizes the importance of small incremental changes and effective delivery. Rob believes that anyone can benefit from DevOps practices and suggests starting with source control and fostering a DevOps culture within teams. He also recommends resources such as blog posts, online self-learning platforms, and community initiatives like Chartforce and Foodforce."}